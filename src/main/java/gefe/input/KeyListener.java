package gefe.input;

import static org.lwjgl.glfw.GLFW.GLFW_PRESS;
import static org.lwjgl.glfw.GLFW.GLFW_RELEASE;

/**
 * https://www.glfw.org/docs/latest/input_guide.html#input_keyboard
 * <p>
 * GLFW divides keyboard input into two categories; key events and character events. Key events relate to actual
 * physical keyboard keys, whereas character events relate to the Unicode code points generated by pressing some of them.
 */
public class KeyListener {

    private static KeyListener instance; // KeyListener Singleton
    private boolean keyPressed[] = new boolean[350]; // number of keybindings

    /**
     * This constructor is private because it should not be able to other classes
     * The only class to create a new KeyListener is the KeyListener Class
     */
    private KeyListener() {
    }

    public static KeyListener get() {
        if (KeyListener.instance == null) {
            KeyListener.instance = new KeyListener();
        }

        return KeyListener.instance;
    }

    /**
     * The callback function receives the keyboard key, platform-specific scancode, key action and modifier bits.
     *
     * @param window Window memory location
     * @param key    Key number
     * @param action Button action
     * @param mods   Modifier bits (key pressed in addition to this key being pressed)
     */
    public static void keyCallback(long window, int key, int scancode, int action, int mods) {
        if (action == GLFW_PRESS) {
            if (key < get().keyPressed.length) {
                get().keyPressed[key] = true;
            }
        } else if (action == GLFW_RELEASE) {
            if (key < get().keyPressed.length) {
                get().keyPressed[key] = false;
            }
        }
    }

    public static boolean isKeyPressed(int keyCode) {
        return get().keyPressed[keyCode];
    }
}
